version: '3.7'


networks:
  app-tier:
    driver: bridge
    
volumes:
  grails-volume:

services:
  s3:
    image: minio/minio
    ports:
      - 9000:9000
    volumes:
      - ./storage/minio:/data
    environment:
      - MINIO_ACCESS_KEY=minio-root-user
      - MINIO_SECRET_KEY=minio-root-password
    command: server --address 0.0.0.0:9000 /data
    networks:
      - app-tier
      
      
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    networks:
      - app-tier
      
      
  springboot-docker-compose-app-container:
    image: micro/mailservice
    build:
      context: mailservice
      dockerfile: ../mailservice/Dockerfile
    volumes:
      - /data/springboot-docker-compose-app
    ports:
      - 8082:8091
    networks:
      - app-tier
   
  reactFrontend:
    image: micro/frontend
    build:
      context: frontend
      dockerfile: ../frontend/Dockerfile
    command: npm run start
    ports:
      - 8085:3000
    volumes: 
      - ./:/frontend
      - /frontend/node_modules
    env-file:
      - ../frontend/.env

    networks:
      - app-tier   
      
  apiGateway:
    image: micro/api-gateway
    environment:
      - redis_service_endPoint=redis
      - redis_service_port=6379
      - minio_service_endPoint=s3
      - minio_service_port=9000
      - frontend_service_url=9000
      - apigateway_port=8084
      - appeals_service_url=appeals
      - users_service_url=users

    build:
      context: api-gateway
      dockerfile: ../api-gateway/Dockerfile
    volumes:
      - /data/springboot-docker-compose-app
    ports:
      - 8083:8091
    networks:
      - app-tier
    depends_on:
      - s3 
      
  dbAppeals:
    image: postgres:12.3
    environment:
      - POSTGRES_DB=database_appeal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - postgres1:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
      #- ./qwe.sql:/docker-entrypoint-initdb.d/init.sql
      
      #- ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    #command: sh -c "sleep 5 && psql -h localhost -d postgres -U postgres -f /docker-entrypoint-initdb.d/init.sql"
    #command: sh -c "gosu postgres postgres --single -jE < /docker-entrypoint-initdb.d/init.sql"
    ports:
      - 5432:5432
    networks:
      - app-tier
      
      
  appeals:
    image: micro/appeals
    ports:
      - '8080:8080'
    environment:
      - DB_HOST=dbAppeals
      - DB_PORT=5432
      - DB_NAME=database_appeal
    build:
        context: appeals
        dockerfile: ../appeals/Dockerfile
    #network_mode: host
    networks:
      - app-tier  
    depends_on:
      - dbAppeals    
      
  dbUsers:
    image: postgres:12.3
    environment:
      - POSTGRES_DB=database_user
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - postgres2:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
      #- ./qwe.sql:/docker-entrypoint-initdb.d/init.sql
      
      #- ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    #command: sh -c "sleep 5 && psql -h localhost -d postgres -U postgres -f /docker-entrypoint-initdb.d/init.sql"
    #command: sh -c "gosu postgres postgres --single -jE < /docker-entrypoint-initdb.d/init.sql"
    ports:
      - 5433:5432
    networks:
      - app-tier      

  users:
    image: micro/users
    ports:
      - '8081:8080'
    environment:
      - DB_HOST=dbUsers
      - DB_PORT=5432
      - DB_NAME=database_user
    build:
        context: users
        dockerfile: ../users/Dockerfile
    #network_mode: host
    networks:
      - app-tier  
    depends_on:
      - dbUsers   
volumes:
  postgres1:
  postgres2:
